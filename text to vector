import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, accuracy_score

# Load the dataset
df = pd.read_csv('/content/train.csv')

# Display the first few rows of the dataset
print("First few rows of the dataset:")
print(df.head())

# Assuming the CSV has 'text' and 'label' columns
# 'text' contains the tweet, 'label' contains 1 for disaster-related and 0 for non-disaster-related

# Preprocess the text data (you can add more preprocessing steps if necessary)
df['text'] = df['text'].str.lower()  # Convert text to lowercase
df['text'] = df['text'].str.replace('[^\w\s]', '', regex=True)  # Remove punctuation and special characters
df['text'] = df['text'].str.replace('\d+', '', regex=True)  # Remove digits

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df['text'], df['target'], test_size=0.2, random_state=42)

# Convert text to numerical features using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a RandomForest classifier for disaster detection
rf_disaster = RandomForestClassifier(n_estimators=100, random_state=42)
rf_disaster.fit(X_train_tfidf, y_train)

# Make predictions
y_pred_disaster = rf_disaster.predict(X_test_tfidf)

# Evaluate the classifier
accuracy_disaster = accuracy_score(y_test, y_pred_disaster)
report_disaster = classification_report(y_test, y_pred_disaster)

print(f'Accuracy (Disaster/Non-Disaster): {accuracy_disaster:.2f}')
print('Classification Report (Disaster/Non-Disaster):')
print(report_disaster)

# Display some examples from the test set with their predicted and actual labels
examples = pd.DataFrame({
    'text': X_test.tolist(),
    'predicted_disaster': y_pred_disaster,
    'actual_disaster': y_test.tolist()
})

print("\nExamples from the test set:")
print(examples.head(10))

# Test the model with a new example
new_tweet = "Forest fire near my home, smoke everywhere!"
new_tweet_processed = new_tweet.lower()
new_tweet_processed = ''.join([c for c in new_tweet_processed if c not in ('!', '.', ':', ';', '-', '_', '?', ',')])
new_tweet_processed = ''.join([i for i in new_tweet_processed if not i.isdigit()])

# Vectorize the new example
new_tweet_tfidf = vectorizer.transform([new_tweet_processed])

# Predict using the trained model
new_prediction = rf_disaster.predict(new_tweet_tfidf)

print("\nNew Tweet Example:")
print(f"Tweet: {new_tweet}")
print(f"Processed Tweet: {new_tweet_processed}")
print(f"Predicted as Disaster-related: {'DISASTER' if new_prediction[0] == 1 else 'NOT A DISASTER'}")
